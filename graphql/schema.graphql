input CatalogueItemInput {
    id: ID
    title: String
    description: String
    category: String
    supplier: String
    image: String
    sellPrice: Float
    buyPrice: Float
}

type Shop {
    id: ID
    name: String
    phone: String
    email: String
    photoUrl: String
    bio: String
}

interface IUser {
    id: ID
    phone: String
    email: String
    photoUrl: String
}

type Customer implements IUser {
    id: ID
    firstName: String
    lastName: String
    phone: String
    email: String
    photoUrl: String
}

type ShopOwner implements IUser {
    id: ID
    firstName: String
    lastName: String
    phone: String
    email: String
    photoUrl: String
}

type Supplier implements IUser {
    id: ID
    name: String
    phone: String
    email: String
    photoUrl: String
}

input CustomerInput {
    id: ID
}

type GenericRequestResponse {
    message: String
    code: String
    object: Object
}

type InventoryItem {
    id: ID
    product: Product!
    quantity: Int
    sellPrice: Float
    buyPrice: Float
}

union Object = Product | Customer

type Product {
    id: ID
    title: String
    description: String
    mainImage: String
}

input ProductsInput {
    title: String
    description: String
    mainImage: String
    brand_id: Int
}

# input ProductDetails {

# }

input InventoryItemInput {
    shop_id: Int
    product_id: Int
    initialStock: Int
    currentStock: Int
    boughtAt: Float
    sellAt: Float
}

input RegisterCustomerInput {
    firstName: String
    lastName: String
    phone: String
    email: String
    password: String
    photoUrl: String
    user_id: Int
}

input ShopOwnerInput {
    firstName: String
    lastName: String
    phone: String
    email: String
    password: String
    photoUrl: String
    user_id: Int
}

input SupplierInput {
    name: String
    phone: String
    email: String
    password: String
    photoUrl: String
    user_id: Int
}

input ShopInput {
    name: String
    phone: String
    email: String
    photoUrl: String
    bio: String
    shop_owner_id: Int
}

type Query {
    inventoryItems(shop_id: Int!): [InventoryItem!]
    customer(email: String!): Customer
}

type Mutation {
    sellProducts(
        items: [InventoryItemInput!]!
        customer_id: Int
    ): GenericRequestResponse
    registerCustomer(customer: RegisterCustomerInput): Customer!
    registerShopOwner(shopOwner: ShopOwnerInput): ShopOwner!
    registerSupplier(supplier: SupplierInput): Supplier!
    registerShop(shop: ShopInput @spread): Shop! @create(model: "Shop")
    addToInventory(item: InventoryItemInput! @spread): InventoryItem!
        @create(model: "InventoryItem")
    createProducts(products: [ProductsInput!]): Int
    removeFromCatalogue(
        store_id: ID
        products: [CatalogueItemInput]
    ): [Product!]
}
