scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

input CatalogueItemInput {
    id: ID
    title: String
    description: String
    category: String
    supplier: String
    image: String
    sellPrice: Float
    buyPrice: Float
}

type Brand {
    id: ID
    name: String
    photoUrl: String
    bio: String
}

type Shop {
    id: ID
    name: String
    phone: String
    email: String
    photoUrl: String
    bio: String
}

interface IUser {
    id: ID
    phone: String
    email: String
    photoUrl: String
}

type Customer implements IUser {
    id: ID
    firstName: String
    lastName: String
    phone: String
    email: String
    photoUrl: String
}

type ShopOwner implements IUser {
    id: ID
    firstName: String
    lastName: String
    phone: String
    email: String
    photoUrl: String
}

type Supplier implements IUser {
    id: ID
    name: String
    phone: String
    email: String
    photoUrl: String
}

type Transaction {
    id: ID
    customer: Customer
    shop: Shop
    created_at: DateTime
    amount: Float
    comment: String
    ref: String
    method: PaymentMethod
    supplier: Supplier
    purchaseOrder: PurchaseOrder
    salesOrder: SalesOrder
}

input CustomerInput {
    id: ID
}

type GenericRequestResponse {
    message: String
    code: String
    object: Object
}

type InventoryItem {
    id: ID
    product: Product!
    currentStock: Int
    sellPrice: Float
    buyPrice: Float
}

type SupplierItem {
    id: ID
    product: Product!
    unitsAvailable: Int
    supplyAt: Float
}

union Object = Product | Customer

type Product {
    id: ID
    title: String
    summary: String
    barcode: String
    description: String
    mainImage: String
}

type PurchaseOrder {
    id: Int
    order_no: String
    supplier_id: Int
    shop_id: Int
    debit_note_id: Int
}

type SalesOrder {
    id: Int
    order_no: String
    customer_id: Int
    shop_id: Int
    credit_note_id: Int
}

type MakeSaleResponse {
    order: SalesOrder!
    transaction: Transaction!
    transactionStatus: TransactionStatus!
}

enum TransactionStatus {
    PENDING
    COMPLETE
    # Failed eg due to insufficient balance
    FAILED
    # Cancelled by paying party
    CANCELLED
}

input ProductsInput {
    title: String
    description: String
    summary: String
    barcode: String
    mainImage: String
    brand_id: Int
}

input InventoryItemInput {
    shop_id: Int
    product_id: Int
    initialStock: Int
    currentStock: Int
    boughtAt: Float
    sellAt: Float
}
input SupplierItemInput {
    supplier_id: Int
    product_id: Int
    unitsAvailable: Int
    supplyAt: Float
}

input RegisterCustomerInput {
    firstName: String
    lastName: String
    phone: String
    email: String
    password: String
    photoUrl: String
    user_id: Int
}

input ShopOwnerInput {
    firstName: String
    lastName: String
    phone: String
    email: String
    password: String
    photoUrl: String
    user_id: Int
}

input SupplierInput {
    name: String
    phone: String
    email: String
    password: String
    photoUrl: String
    user_id: Int
}

input ShopInput {
    name: String
    phone: String
    email: String
    photoUrl: String
    bio: String
    shop_owner_id: Int
}

input SalesOrderInput {
    amount: Float
    customer_id: Int
    shop_id: Int
    credit_note: CreditNoteInput
    items: [OrderItemInput!]!
}

input PurchaseOrderInput {
    amount: Float
    supplier_id: Int
    shop_id: Int
    debit_note: DebitNoteInput
    items: [OrderItemInput!]!
}

input OrderItemInput {
    quantity: Int
    supplier_item_id: Int
    inventory_item_id: Int
}

input CreditNoteInput {
    amount: Float
    deadline: String
}

input DebitNoteInput {
    amount: Float
    deadline: String
}

input BrandInput {
    name: String
    photoUrl: String
    bio: String
}

input TransactionInput {
    amount: Float
    comment: String
    ref: String
    method: PaymentMethod!
    supplier_id: Int
    purchase_order_id: Int
    sales_order_id: Int
    customer_id: Int
    shop_id: Int
}

enum PaymentMethod {
    CASH
    MPESA
}

type Query {
    inventoryItems(shop_id: Int!): [InventoryItem!]
    supplierItems(supplier_id: Int!): [SupplierItem!]
    customer(email: String!): Customer
}

type Mutation {
    sellProducts(
        order: SalesOrderInput!
        transaction: TransactionInput!
        email: String
        phone: String
        sendEmail: Boolean
        sendSms: Boolean
    ): MakeSaleResponse
    registerCustomer(customer: RegisterCustomerInput!): Customer!
    registerShopOwner(shopOwner: ShopOwnerInput!): ShopOwner!
    registerSupplier(supplier: SupplierInput!): Supplier!
    registerShop(shop: ShopInput! @spread): Shop! @create(model: "Shop")
    addToInventory(item: InventoryItemInput! @spread): InventoryItem!
        @create(model: "InventoryItem")
    addSupplierItem(item: SupplierItemInput! @spread): SupplierItem!
        @create(model: "SupplierItem")
    createProducts(products: [ProductsInput!]): [Product!]
    removeFromCatalogue(
        store_id: ID
        products: [CatalogueItemInput!]
    ): [Product!]
    createBrand(brand: BrandInput! @spread): Brand! @create(model: "Brand")
    makePurchaseOrder(order: PurchaseOrderInput!): PurchaseOrder
    makeSalesOrder(order: SalesOrderInput!): SalesOrder
    makeTransaction(transaction: TransactionInput! @spread): Transaction!
        @create(model: "Transaction")
}
